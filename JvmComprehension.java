// ClassLoader используется для загрузки файлов классов в Java.
// Код Java компилируется в файл класса компилятором javac а JVM выполняет программу Java, выполняя байтовые коды, записанные в файле класса.
// ClassLoader отвечает за загрузку файлов классов из файловой системы. В нашем случае это классы JvmComprehension, Integer, Object, System.
// Затем идёт связывание классов (Проверка что код валиден, подготовка примитивов в статических полях, связывание ссылок на другие классы).
// Классы загружаются в отдел памяти который называется Metaspace (пространство для метаданных).
// В момент вызова метода создается фрейм с main методом. В этом стеке также будут хранится все переменные.

public class JvmComprehension {

    public static void main(String[] args) {
        int i = 1;                      // 1 Переменная i типа int со сзначением 1
        Object o = new Object();        // 2 В heap(куча) разделе памяти создаётся новый экземпляр класса Object, в фрейме main создается ссылка на объект класса Object с именем "o"
        Integer ii = 2;                 // 3 В heap(куча) cоздается новый экземпляр класса Integer, в фрейме main создаётся ссылка на объект класса Integer с именем ii
        printAll(o, i, ii);             // 4 Далее идет вызов метода printAll в котором передаются ссылки на объект и значение. Для этого метода создается новый фрейм в стеке
        System.out.println("finished"); // 7 В стеке создается фрейм с ссылкой на строку со значением "finished"
    }

    private static void printAll(Object o, int i, Integer ii) {
        Integer uselessVar = 700;                   // 5 Объект с названием "uselessVar" сохраняется в heap(куча). В стеке фрейм printAll сохраняется ссылка на этот объект
        System.out.println(o.toString() + i + ii);  // 6  В стеке создается фрейм с ссылкой на объект "ii" и значение "i". В стеке создается фрейм метода toString()
    }
}

